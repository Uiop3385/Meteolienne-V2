#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/2aaa03bd-bf88-41da-ae73-5ecbffb9105f 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String commandPrompt;
  CloudColoredLight led;
  CloudIlluminance luminosite;
  int co2;
  int direction;
  int ledDisplayOption;
  int minWakeTime;
  int sleepDuration;
  int uv;
  CloudLength altitude;
  CloudLocation position;
  CloudPercentage batterie;
  CloudRelativeHumidity humidite;
  CloudPressure pression;
  bool disableWiFi;
  bool isAwake;
  bool keepAwake;
  CloudTemperature temperature;
  CloudTime sleepStartTime;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

#include <ArduinoLowPower.h>
#include "Battery/Battery.h"
#include "CommandLine/CommandHandler/CommandHandler.h"
#include "LED/LED.h"
#include <neotimer.h>
#include "Rotation/Rotation.h"
#include "Sensors/Sensors.h"

#include "CommandLine/Commands/Commands.h"

CommandHandler commandHandler(10, 5);

const byte wakeupPin = 0;
const byte envSensorTransistorPin = 6;
const byte stepperTransistorPin = 7;
const byte aqSensorTransistorPin = 8;
const byte windvaneTransistorPin = 9;

float rawADC;
float voltADC;
float voltBat;
const int R1 = 330000;
const int R2 = 1000000;
const float batteryFullVoltage = 4.2;
const float batteryEmptyVoltage = 3.3;
const float batteryCapacity = 1.8;
int max_Source_voltage = (3.3 * (R1 + R2)) / R2;

volatile uint8_t wakeupCounterLSB = 0;
volatile uint8_t wakeupCounterMSB = 0;

Neotimer updateTimer = Neotimer(20000);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  setDebugMessageLevel(4);
  ArduinoCloud.printDebugInfo();

  CommandHandler::ArgType singleIntArg[] = {CommandHandler::INT};
  CommandHandler::ArgType singleStringArg[] = {CommandHandler::STRING};
  
  commandHandler.registerCommand("echo", echoCommand, "Returns the inputted arguments.", 1, 5, nullptr, 3);
  commandHandler.registerCommand("info", infoCommand, "Tests the argument count logic.", 0, 5, nullptr, 3);
  commandHandler.registerCommand("locate", locateCommand, "Updates the device's location.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("poscalib", positionCalibrateCommand, "Calibrates the stepper motor to the given position.", 1, 1, singleIntArg, 1);
  commandHandler.registerCommand("stepcalib", stepCalibrateCommand, "Calibrates the stepper motor by the given number of steps.", 1, 1, singleIntArg, 1);
  commandHandler.registerCommand("reset", resetCommand, "Resets the device. Clears RAM and call stack.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("sleepnow", sleepNowCommand, "Sends the device to sleep immediately. You can specify a custom duration in minutes.", 0, 1, singleIntArg, 1);
  commandHandler.registerCommand("wifilpmcfg", wifiLpmConfigurationCommand, "Sets the low power mode configuration. 0 for off, 1 for on.", 1, 1, singleIntArg, 1);
  commandHandler.registerCommand("wifinetscan", wifiScanNetworksCommand, "Scans for all detectable networks. Returns a list containing their IDs, SSIDs and RSSIs.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("wifiping", wifiPingCommand, "Attempts to ping the given hostname or IP address.", 1, 1, singleStringArg, 1);
  commandHandler.registerCommand("wifigetdbginf", wifiGetDebugInfoCommand, "Returns a list of debugging information about the Wifi connectivity.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("wifigetrsncd", wifiGetReasonCodeCommand, "Returns the latest deauthentication reason code.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("demospin", demoSpinCommand, "Spins the stepper motor by a full turn, and then back.", 0, 0, nullptr, 0);
  commandHandler.registerCommand("demoledbltin", demoLedBuiltinCommand, "Changes the state of the built-in LED to turn it on or off.", 0, 0, nullptr, 0);
  
  LowPower.attachInterruptWakeup(digitalPinToInterrupt(wakeupPin), wakeup, FALLING);

  WiFi.lowPowerMode();

  analogReadResolution(12);
  analogReference(AR_DEFAULT);

  WiFiDrv::pinMode(25, OUTPUT);
  WiFiDrv::pinMode(26, OUTPUT);
  WiFiDrv::pinMode(27, OUTPUT);

  pinMode(aq_sensor_pin, INPUT);
  pinMode(wind_vane_pin, INPUT);
  pinMode(wakeupPin, INPUT_PULLUP);
  pinMode(LED_BUILTIN, OUTPUT);
  pinMode(envSensorTransistorPin, OUTPUT);
  pinMode(stepperTransistorPin, OUTPUT);
  pinMode(aqSensorTransistorPin, OUTPUT);
  pinMode(windvaneTransistorPin, OUTPUT);

  setTransistorStates(HIGH);

  stepper.setSpeed(5);

  PMIC.begin();
  initPMIC();
}

void loop() {
  if (WiFi.status() != WL_CONNECTED) {
    WiFi.begin(SECRET_SSID, SECRET_OPTIONAL_PASS);
  }
  updateTimer.start();
  
  isAwake = true;
  ArduinoCloud.update();
  updateLED();
  updateEnvironmentalSensor();
  updateRotation(convertVoltageToPosition(analogRead(wind_vane_pin)));
  ArduinoCloud.update();
  updateBatteryCapacity();
  manageCharge();
  updatePosition();
  updateAQSensor();
  ArduinoCloud.update();

  while (updateTimer.waiting()) {
    ArduinoCloud.update();
  }
  updateTimer.stop();
  updateTimer.reset();

  if (!keepAwake) {
    sleepRoutine(0);
  }
}

void sleepRoutine(int customDuration) {
  static uint32_t sleep_for = 0;
  sleepStartTime = WiFi.getTime();
  isAwake = false;
  ArduinoCloud.update();
  if (disableWiFi) {
    WiFi.end();
  }
  if (customDuration == 0) {
    sleep_for = trunc(sleepDuration * 60000);
  } else {
    sleep_for = trunc(customDuration * 60000);
  }
  setTransistorStates(LOW);
  LowPower.deepSleep(sleep_for);
  setTransistorStates(HIGH);
}

void setTransistorStates(bool state) {
  digitalWrite(envSensorTransistorPin, state);
  digitalWrite(stepperTransistorPin, state);
  digitalWrite(aqSensorTransistorPin, state);
  digitalWrite(windvaneTransistorPin, state);
}

/*
  Since CommandPrompt is READ_WRITE variable, onCommandPromptChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCommandPromptChange()  {
  if (commandPrompt.length() == 0) {
    return;
  }
  String response = commandHandler.processInput(commandPrompt);
  commandPrompt = response;
}

/*
  Since SleepDuration is READ_WRITE variable, onSleepDurationChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSleepDurationChange()  {
  // Add your code here to act upon SleepDuration change
  return;
}

/*
  Since KeepAwake is READ_WRITE variable, onKeepAwakeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onKeepAwakeChange()  {
  // Add your code here to act upon KeepAwake change
  return;
}

/*
  Since DisableWiFi is READ_WRITE variable, onDisableWiFiChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onDisableWiFiChange()  {
  // Add your code here to act upon DisableWiFi change
  return;
}

void wakeup() {
  wakeupCounterLSB++;
  if (wakeupCounterLSB == 255) {
    wakeupCounterLSB = 0;
    wakeupCounterMSB++;
  }
  Serial.println("Device woken up. This is wakeup NÂ°" + String(wakeupCounterMSB * wakeupCounterLSB));
}

/*
  Since MinWakeTime is READ_WRITE variable, onMinWakeTimeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMinWakeTimeChange()  {
  updateTimer.set(minWakeTime * 1000);
}